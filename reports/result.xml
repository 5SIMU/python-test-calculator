<?xml version="1.0" encoding="utf-8"?><testsuites><testsuite name="pytest" errors="0" failures="2" skipped="0" tests="7" time="21.380" timestamp="2023-07-03T14:28:22.354374" hostname="CLJ-C-002NC"><testcase classname="tests.test_addition" name="test_add" file="tests\test_addition.py" line="32" time="0.001" /><testcase classname="tests.test_addition" name="test_add_string" file="tests\test_addition.py" line="35" time="0.000" /><testcase classname="tests.test_addition" name="test_SMDB" file="tests\test_addition.py" line="38" time="13.609"><failure message="selenium.common.exceptions.WebDriverException: Message: unknown error: net::ERR_NAME_NOT_RESOLVED&#10;  (Session info: chrome=114.0.5735.134)&#10;Stacktrace:&#10;Backtrace:&#10;&#09;GetHandleVerifier [0x0116A813+48355]&#10;&#09;(No symbol) [0x010FC4B1]&#10;&#09;(No symbol) [0x01005358]&#10;&#09;(No symbol) [0x01001B33]&#10;&#09;(No symbol) [0x00FF8CA5]&#10;&#09;(No symbol) [0x00FF9D0A]&#10;&#09;(No symbol) [0x00FF9003]&#10;&#09;(No symbol) [0x00FF8355]&#10;&#09;(No symbol) [0x00FF82EC]&#10;&#09;(No symbol) [0x00FF6F26]&#10;&#09;(No symbol) [0x00FF7688]&#10;&#09;(No symbol) [0x01006B52]&#10;&#09;(No symbol) [0x0105CF01]&#10;&#09;(No symbol) [0x0104A73C]&#10;&#09;(No symbol) [0x0105C922]&#10;&#09;(No symbol) [0x0104A536]&#10;&#09;(No symbol) [0x010282DC]&#10;&#09;(No symbol) [0x010293DD]&#10;&#09;GetHandleVerifier [0x013CAABD+2539405]&#10;&#09;GetHandleVerifier [0x0140A78F+2800735]&#10;&#09;GetHandleVerifier [0x0140456C+2775612]&#10;&#09;GetHandleVerifier [0x011F51E0+616112]&#10;&#09;(No symbol) [0x01105F8C]&#10;&#09;(No symbol) [0x01102328]&#10;&#09;(No symbol) [0x0110240B]&#10;&#09;(No symbol) [0x010F4FF7]&#10;&#09;BaseThreadInitThunk [0x755800C9+25]&#10;&#09;RtlGetAppContainerNamedObjectPath [0x77557B4E+286]&#10;&#09;RtlGetAppContainerNamedObjectPath [0x77557B1E+238]">test_setup = None

    def test_SMDB(test_setup):
        time.sleep(10)
&gt;       driver.get("https://docs.pytest.org/en/7.3.x/")

tests\test_addition.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
Lib\site-packages\selenium\webdriver\remote\webdriver.py:355: in get
    self.execute(Command.GET, {"url": url})
Lib\site-packages\selenium\webdriver\remote\webdriver.py:346: in execute
    self.error_handler.check_response(response)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000002B74991FCD0&gt;
response = {'status': 500, 'value': '{"value":{"error":"unknown error","message":"unknown error: net::ERR_NAME_NOT_RESOLVED\\n  (...\n\\tRtlGetAppContainerNamedObjectPath [0x77557B4E+286]\\n\\tRtlGetAppContainerNamedObjectPath [0x77557B1E+238]\\n"}}'}

    def check_response(self, response: Dict[str, Any]) -&gt; None:
        """Checks that a JSON response from the WebDriver does not have an
        error.
    
        :Args:
         - response - The JSON response from the WebDriver server as a dictionary
           object.
    
        :Raises: If the response contains an error message.
        """
        status = response.get("status", None)
        if not status or status == ErrorCode.SUCCESS:
            return
        value = None
        message = response.get("message", "")
        screen: str = response.get("screen", "")
        stacktrace = None
        if isinstance(status, int):
            value_json = response.get("value", None)
            if value_json and isinstance(value_json, str):
                import json
    
                try:
                    value = json.loads(value_json)
                    if len(value) == 1:
                        value = value["value"]
                    status = value.get("error", None)
                    if not status:
                        status = value.get("status", ErrorCode.UNKNOWN_ERROR)
                        message = value.get("value") or value.get("message")
                        if not isinstance(message, str):
                            value = message
                            message = message.get("message")
                    else:
                        message = value.get("message", None)
                except ValueError:
                    pass
    
        exception_class: Type[WebDriverException]
        if status in ErrorCode.NO_SUCH_ELEMENT:
            exception_class = NoSuchElementException
        elif status in ErrorCode.NO_SUCH_FRAME:
            exception_class = NoSuchFrameException
        elif status in ErrorCode.NO_SUCH_SHADOW_ROOT:
            exception_class = NoSuchShadowRootException
        elif status in ErrorCode.NO_SUCH_WINDOW:
            exception_class = NoSuchWindowException
        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:
            exception_class = StaleElementReferenceException
        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:
            exception_class = ElementNotVisibleException
        elif status in ErrorCode.INVALID_ELEMENT_STATE:
            exception_class = InvalidElementStateException
        elif (
            status in ErrorCode.INVALID_SELECTOR
            or status in ErrorCode.INVALID_XPATH_SELECTOR
            or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER
        ):
            exception_class = InvalidSelectorException
        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:
            exception_class = ElementNotSelectableException
        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:
            exception_class = ElementNotInteractableException
        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:
            exception_class = InvalidCookieDomainException
        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:
            exception_class = UnableToSetCookieException
        elif status in ErrorCode.TIMEOUT:
            exception_class = TimeoutException
        elif status in ErrorCode.SCRIPT_TIMEOUT:
            exception_class = TimeoutException
        elif status in ErrorCode.UNKNOWN_ERROR:
            exception_class = WebDriverException
        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:
            exception_class = UnexpectedAlertPresentException
        elif status in ErrorCode.NO_ALERT_OPEN:
            exception_class = NoAlertPresentException
        elif status in ErrorCode.IME_NOT_AVAILABLE:
            exception_class = ImeNotAvailableException
        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:
            exception_class = ImeActivationFailedException
        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:
            exception_class = MoveTargetOutOfBoundsException
        elif status in ErrorCode.JAVASCRIPT_ERROR:
            exception_class = JavascriptException
        elif status in ErrorCode.SESSION_NOT_CREATED:
            exception_class = SessionNotCreatedException
        elif status in ErrorCode.INVALID_ARGUMENT:
            exception_class = InvalidArgumentException
        elif status in ErrorCode.NO_SUCH_COOKIE:
            exception_class = NoSuchCookieException
        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:
            exception_class = ScreenshotException
        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:
            exception_class = ElementClickInterceptedException
        elif status in ErrorCode.INSECURE_CERTIFICATE:
            exception_class = InsecureCertificateException
        elif status in ErrorCode.INVALID_COORDINATES:
            exception_class = InvalidCoordinatesException
        elif status in ErrorCode.INVALID_SESSION_ID:
            exception_class = InvalidSessionIdException
        elif status in ErrorCode.UNKNOWN_METHOD:
            exception_class = UnknownMethodException
        else:
            exception_class = WebDriverException
        if not value:
            value = response["value"]
        if isinstance(value, str):
            raise exception_class(value)
        if message == "" and "message" in value:
            message = value["message"]
    
        screen = None  # type: ignore[assignment]
        if "screen" in value:
            screen = value["screen"]
    
        stacktrace = None
        st_value = value.get("stackTrace") or value.get("stacktrace")
        if st_value:
            if isinstance(st_value, str):
                stacktrace = st_value.split("\n")
            else:
                stacktrace = []
                try:
                    for frame in st_value:
                        line = frame.get("lineNumber", "")
                        file = frame.get("fileName", "&lt;anonymous&gt;")
                        if line:
                            file = f"{file}:{line}"
                        meth = frame.get("methodName", "&lt;anonymous&gt;")
                        if "className" in frame:
                            meth = f"{frame['className']}.{meth}"
                        msg = "    at %s (%s)"
                        msg = msg % (meth, file)
                        stacktrace.append(msg)
                except TypeError:
                    pass
        if exception_class == UnexpectedAlertPresentException:
            alert_text = None
            if "data" in value:
                alert_text = value["data"].get("text")
            elif "alert" in value:
                alert_text = value["alert"].get("text")
            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here
&gt;       raise exception_class(message, screen, stacktrace)
E       selenium.common.exceptions.WebDriverException: Message: unknown error: net::ERR_NAME_NOT_RESOLVED
E         (Session info: chrome=114.0.5735.134)
E       Stacktrace:
E       Backtrace:
E       	GetHandleVerifier [0x0116A813+48355]
E       	(No symbol) [0x010FC4B1]
E       	(No symbol) [0x01005358]
E       	(No symbol) [0x01001B33]
E       	(No symbol) [0x00FF8CA5]
E       	(No symbol) [0x00FF9D0A]
E       	(No symbol) [0x00FF9003]
E       	(No symbol) [0x00FF8355]
E       	(No symbol) [0x00FF82EC]
E       	(No symbol) [0x00FF6F26]
E       	(No symbol) [0x00FF7688]
E       	(No symbol) [0x01006B52]
E       	(No symbol) [0x0105CF01]
E       	(No symbol) [0x0104A73C]
E       	(No symbol) [0x0105C922]
E       	(No symbol) [0x0104A536]
E       	(No symbol) [0x010282DC]
E       	(No symbol) [0x010293DD]
E       	GetHandleVerifier [0x013CAABD+2539405]
E       	GetHandleVerifier [0x0140A78F+2800735]
E       	GetHandleVerifier [0x0140456C+2775612]
E       	GetHandleVerifier [0x011F51E0+616112]
E       	(No symbol) [0x01105F8C]
E       	(No symbol) [0x01102328]
E       	(No symbol) [0x0110240B]
E       	(No symbol) [0x010F4FF7]
E       	BaseThreadInitThunk [0x755800C9+25]
E       	RtlGetAppContainerNamedObjectPath [0x77557B4E+286]
E       	RtlGetAppContainerNamedObjectPath [0x77557B1E+238]

Lib\site-packages\selenium\webdriver\remote\errorhandler.py:245: WebDriverException</failure></testcase><testcase classname="tests.test_backend" name="test_verify_status_code" file="tests\test_backend.py" line="8" time="0.000" /><testcase classname="tests.test_backend" name="test_verify_body_message" file="tests\test_backend.py" line="12" time="0.000" /><testcase classname="tests.test_backend" name="test_verify_header_content" file="tests\test_backend.py" line="16" time="0.000" /><testcase classname="tests.test_ui" name="test_simo" file="tests\test_ui.py" line="13" time="0.099"><failure message="selenium.common.exceptions.WebDriverException: Message: Reached error page: about:neterror?e=dnsNotFound&amp;u=https%3A//docs.pytest.org/en/7.3.x/&amp;c=UTF-8&amp;d=We%20can%E2%80%99t%20connect%20to%20the%20server%20at%20docs.pytest.org.&#10;Stacktrace:&#10;WebDriverError@chrome://remote/content/shared/webdriver/Errors.jsm:186:5&#10;UnknownError@chrome://remote/content/shared/webdriver/Errors.jsm:513:5&#10;checkReadyState@chrome://remote/content/marionette/navigate.js:65:24&#10;onNavigation@chrome://remote/content/marionette/navigate.js:333:39&#10;emit@resource://gre/modules/EventEmitter.jsm:160:20&#10;receiveMessage@chrome://remote/content/marionette/actors/MarionetteEventsParent.jsm:44:25">def test_simo():
    
&gt;       driver.get("https://docs.pytest.org/en/7.3.x/")

tests\test_ui.py:16: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
Lib\site-packages\selenium\webdriver\remote\webdriver.py:355: in get
    self.execute(Command.GET, {"url": url})
Lib\site-packages\selenium\webdriver\remote\webdriver.py:346: in execute
    self.error_handler.check_response(response)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000002B74A3B5510&gt;
response = {'status': 500, 'value': '{"value":{"error":"unknown error","message":"Reached error page: about:neterror?e=dnsNotFoun...tEmitter.jsm:160:20\\nreceiveMessage@chrome://remote/content/marionette/actors/MarionetteEventsParent.jsm:44:25\\n"}}'}

    def check_response(self, response: Dict[str, Any]) -&gt; None:
        """Checks that a JSON response from the WebDriver does not have an
        error.
    
        :Args:
         - response - The JSON response from the WebDriver server as a dictionary
           object.
    
        :Raises: If the response contains an error message.
        """
        status = response.get("status", None)
        if not status or status == ErrorCode.SUCCESS:
            return
        value = None
        message = response.get("message", "")
        screen: str = response.get("screen", "")
        stacktrace = None
        if isinstance(status, int):
            value_json = response.get("value", None)
            if value_json and isinstance(value_json, str):
                import json
    
                try:
                    value = json.loads(value_json)
                    if len(value) == 1:
                        value = value["value"]
                    status = value.get("error", None)
                    if not status:
                        status = value.get("status", ErrorCode.UNKNOWN_ERROR)
                        message = value.get("value") or value.get("message")
                        if not isinstance(message, str):
                            value = message
                            message = message.get("message")
                    else:
                        message = value.get("message", None)
                except ValueError:
                    pass
    
        exception_class: Type[WebDriverException]
        if status in ErrorCode.NO_SUCH_ELEMENT:
            exception_class = NoSuchElementException
        elif status in ErrorCode.NO_SUCH_FRAME:
            exception_class = NoSuchFrameException
        elif status in ErrorCode.NO_SUCH_SHADOW_ROOT:
            exception_class = NoSuchShadowRootException
        elif status in ErrorCode.NO_SUCH_WINDOW:
            exception_class = NoSuchWindowException
        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:
            exception_class = StaleElementReferenceException
        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:
            exception_class = ElementNotVisibleException
        elif status in ErrorCode.INVALID_ELEMENT_STATE:
            exception_class = InvalidElementStateException
        elif (
            status in ErrorCode.INVALID_SELECTOR
            or status in ErrorCode.INVALID_XPATH_SELECTOR
            or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER
        ):
            exception_class = InvalidSelectorException
        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:
            exception_class = ElementNotSelectableException
        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:
            exception_class = ElementNotInteractableException
        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:
            exception_class = InvalidCookieDomainException
        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:
            exception_class = UnableToSetCookieException
        elif status in ErrorCode.TIMEOUT:
            exception_class = TimeoutException
        elif status in ErrorCode.SCRIPT_TIMEOUT:
            exception_class = TimeoutException
        elif status in ErrorCode.UNKNOWN_ERROR:
            exception_class = WebDriverException
        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:
            exception_class = UnexpectedAlertPresentException
        elif status in ErrorCode.NO_ALERT_OPEN:
            exception_class = NoAlertPresentException
        elif status in ErrorCode.IME_NOT_AVAILABLE:
            exception_class = ImeNotAvailableException
        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:
            exception_class = ImeActivationFailedException
        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:
            exception_class = MoveTargetOutOfBoundsException
        elif status in ErrorCode.JAVASCRIPT_ERROR:
            exception_class = JavascriptException
        elif status in ErrorCode.SESSION_NOT_CREATED:
            exception_class = SessionNotCreatedException
        elif status in ErrorCode.INVALID_ARGUMENT:
            exception_class = InvalidArgumentException
        elif status in ErrorCode.NO_SUCH_COOKIE:
            exception_class = NoSuchCookieException
        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:
            exception_class = ScreenshotException
        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:
            exception_class = ElementClickInterceptedException
        elif status in ErrorCode.INSECURE_CERTIFICATE:
            exception_class = InsecureCertificateException
        elif status in ErrorCode.INVALID_COORDINATES:
            exception_class = InvalidCoordinatesException
        elif status in ErrorCode.INVALID_SESSION_ID:
            exception_class = InvalidSessionIdException
        elif status in ErrorCode.UNKNOWN_METHOD:
            exception_class = UnknownMethodException
        else:
            exception_class = WebDriverException
        if not value:
            value = response["value"]
        if isinstance(value, str):
            raise exception_class(value)
        if message == "" and "message" in value:
            message = value["message"]
    
        screen = None  # type: ignore[assignment]
        if "screen" in value:
            screen = value["screen"]
    
        stacktrace = None
        st_value = value.get("stackTrace") or value.get("stacktrace")
        if st_value:
            if isinstance(st_value, str):
                stacktrace = st_value.split("\n")
            else:
                stacktrace = []
                try:
                    for frame in st_value:
                        line = frame.get("lineNumber", "")
                        file = frame.get("fileName", "&lt;anonymous&gt;")
                        if line:
                            file = f"{file}:{line}"
                        meth = frame.get("methodName", "&lt;anonymous&gt;")
                        if "className" in frame:
                            meth = f"{frame['className']}.{meth}"
                        msg = "    at %s (%s)"
                        msg = msg % (meth, file)
                        stacktrace.append(msg)
                except TypeError:
                    pass
        if exception_class == UnexpectedAlertPresentException:
            alert_text = None
            if "data" in value:
                alert_text = value["data"].get("text")
            elif "alert" in value:
                alert_text = value["alert"].get("text")
            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here
&gt;       raise exception_class(message, screen, stacktrace)
E       selenium.common.exceptions.WebDriverException: Message: Reached error page: about:neterror?e=dnsNotFound&amp;u=https%3A//docs.pytest.org/en/7.3.x/&amp;c=UTF-8&amp;d=We%20can%E2%80%99t%20connect%20to%20the%20server%20at%20docs.pytest.org.
E       Stacktrace:
E       WebDriverError@chrome://remote/content/shared/webdriver/Errors.jsm:186:5
E       UnknownError@chrome://remote/content/shared/webdriver/Errors.jsm:513:5
E       checkReadyState@chrome://remote/content/marionette/navigate.js:65:24
E       onNavigation@chrome://remote/content/marionette/navigate.js:333:39
E       emit@resource://gre/modules/EventEmitter.jsm:160:20
E       receiveMessage@chrome://remote/content/marionette/actors/MarionetteEventsParent.jsm:44:25

Lib\site-packages\selenium\webdriver\remote\errorhandler.py:245: WebDriverException</failure></testcase></testsuite></testsuites>